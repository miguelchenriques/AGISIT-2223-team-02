---
# file: ansible-gcp-servers-setup-all.yml
# configures the server instances
# This Playbook has Three Plays: one for critical configurations in all servers
# A second one for installing software in web servers
# a third one to install software in the Load Balancer server

# This First Play Sets up critical configuration on servers
- hosts: all
  # as the systems are not yet "known" by Ansible Facts cannot be gathered yet
  gather_facts: no
  remote_user: ubuntu
  become: yes
  become_method: sudo

  pre_tasks:
    # To operate remotely in critical files without direct user input
    - name: Remove require tty - alt
      lineinfile:
        regexp: "requiretty"
        dest: /etc/sudoers.d/os_defaults
        state: absent
    # Giving permissions in sudoers for system critical files (see https://docs.ansible.com/ansible/latest/modules/lineinfile_module.html)
    - name: Validate the sudoers file before saving  not to require password
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%ADMIN ALL='
        line: '%ADMIN ALL=(ALL) NOPASSWD: ALL'
        validate: /usr/sbin/visudo -cf %s
    # Install the SSH key on servers
    - name: install ssh key
      authorized_key:
        user: ubuntu
        key: "{{ lookup('file', '/home/vagrant/.ssh/id_rsa.pub') }}"
        state: present


############################################################
# Configure node_exporter for all instances  #
############################################################  
- hosts: targets
  gather_facts: true
  remote_user: ubuntu
  become: yes
  become_method: sudo
  tasks:

    - name: Create folder for node_exporter files
      file: 
        path: /home/ubuntu/node_exporter
        state: directory
        mode: 0755

    - name: Download node_exporter
      get_url:
        url: https://github.com/prometheus/node_exporter/releases/download/v1.4.0/node_exporter-1.4.0.linux-amd64.tar.gz
        dest: /home/ubuntu/node_exporter/
  
    - name: Unarchive downloaded file
      ansible.builtin.shell: cd /home/ubuntu/node_exporter && tar xvfz node_exporter-*.*-amd64.tar.gz
    
    - name: Create symlink to node_exporter
      file:
        path: /usr/bin/node_exporter
        state: link 
        src: /home/ubuntu/node_exporter/node_exporter-1.4.0.linux-amd64/node_exporter
    
    - name: Install node_exporter unit file on systemd
      template: 
        src: /home/vagrant/project/gcpcloud/monitoring/node_exporter/node_exporter.service
        dest: /etc/systemd/system/node_exporter.service
   
    - name: Configure systemd to use node_exporter service
      systemd:
        daemon_reload: yes
        enabled: yes
        state: started
        name: node_exporter.service


###############################################################
# Configure the monitor instance with prometheus and grafana  #
###############################################################  
- hosts: monitor
  gather_facts: true
  remote_user: ubuntu
  become: yes
  become_method: sudo
  tasks:

     #Prometheus Setup
    - name: Create folder for prometheus files
      file: 
        path: /home/ubuntu/prometheus
        state: directory
        mode: 0755

    - name: Download prometheus
      get_url:
        url: https://github.com/prometheus/prometheus/releases/download/v2.39.1/prometheus-2.39.1.linux-amd64.tar.gz
        dest: /home/ubuntu/prometheus/
  
    - name: Unarchive downloaded file
      ansible.builtin.shell: cd /home/ubuntu/prometheus && tar xvf prometheus-2.39.1.linux-amd64.tar.gz
    
    - name: Create folder for prometheus configuration files
      file: 
        path: /var/lib/prometheus
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: 0755

    - name: Create symlink to prometheus
      file:
        path: /usr/bin/prometheus
        state: link 
        src: /home/ubuntu/prometheus/prometheus-2.39.1.linux-amd64/prometheus

    - name: Deploy prometheus configuration file
      template: 
        src: /home/vagrant/project/gcpcloud/monitoring/prometheus/prometheus.yml.j2
        dest: /home/ubuntu/prometheus/prometheus.yml
    
    - name: Enable prometheus on systemd
      template: 
        src: /home/vagrant/project/gcpcloud/monitoring/prometheus/prometheus.service
        dest: /etc/systemd/system/prometheus.service
   
    - name: Configure systemd to use service
      systemd:
        daemon_reload: yes
        enabled: yes
        state: started
        name: prometheus.service

     #Grafana Installation
    - name: Install necessary package for grafana
      apt: 
          name: apt-transport-https
          state: present
          update_cache: yes

    - name: Add grafana gpg key
      shell: curl https://packages.grafana.com/gpg.key | sudo apt-key add -

    - name: Add grafana repo 
      apt_repository:
        repo: deb https://packages.grafana.com/oss/deb stable main
        state: present
        filename: grafana

    - name: Install grafana
      apt: 
          name: grafana
          state: present
          update_cache: yes

    - name: Copy the datasource file to provisioning
      copy: 
        src: /home/vagrant/project/gcpcloud/monitoring/grafana/datasource.yml
        dest: /etc/grafana/provisioning/datasources

    - name: Copy the dashboard file to provisioning
      copy: 
        src: /home/vagrant/project/gcpcloud/monitoring/grafana/calculator_service_dashboard.json
        dest: /etc/grafana/provisioning/dashboards

    - name: Copy the dashboard config file to provisioning
      copy: 
        src: /home/vagrant/project/gcpcloud/monitoring/grafana/dashboard.yml
        dest: /etc/grafana/provisioning/dashboards

    - name: Enable and start grafana service
      service:
        name: grafana-server
        enabled: yes
        state: started
