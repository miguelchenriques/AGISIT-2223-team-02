# -*- mode: ruby -*-
# vi: set ft=ruby :

# Ensure this Project is for Virtualbox Provider
ENV['VAGRANT_DEFAULT_PROVIDER'] = "virtualbox"

VAGRANT_PLUGINS = [
  "vagrant-vbguest",
  "vagrant-reload",
]
VAGRANT_PLUGINS.each do |plugin|
  unless Vagrant.has_plugin?("#{plugin}")
    system("vagrant plugin install #{plugin}")
    exit system('vagrant', *ARGV)
  end
end

Vagrant.configure("2") do |config|

  config.ssh.insert_key = false
  config.vbguest.auto_update = false
  config.vm.box_check_update = false

  # create Management (mgmt) node
  config.vm.define "mgmt" do |mgvb|
    mgvb.vm.box = "ubuntu/focal64"
    mgvb.vm.hostname = "mgmt"
    mgvb.vm.network :private_network, ip: "192.168.56.20"
    # Provider Virtualbox
    mgvb.vm.provider "virtualbox" do |vb|
      vb.name = "mgmt"
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.memory = "2048"
      vb.cpus = 1
    end # of vb
    # Shared folders
    if Vagrant::Util::Platform.windows? then
      # Configuration SPECIFIC for Windows 10 hosts
      mgvb.vm.synced_folder "tools", "/home/vagrant/tools",
        owner: "vagrant", group: "vagrant",
        mount_options: ["dmode=775","fmode=755"]
    else
      mgvb.vm.synced_folder "tools", "/home/vagrant/tools",
        mount_options: ["dmode=775", "fmode=755"]
    end # of shared folders
    # Provisioning with reload (reboot)
    mgvb.vm.provision "shell", path: "bootstrap.sh"
    mgvb.vm.provision "shell", path: "hosts_ip.sh"
    mgvb.vm.provision "shell", path: "hosts_ssh.sh"
    mgvb.vm.provision :reload
  end # of mgvb

  # Create VM for Load Balancer
  config.vm.define "balancer" do |srv|
    srv.vm.box = "ubuntu/focal64"
    srv.vm.hostname = "balancer"
    srv.vm.network :private_network, ip: "192.168.56.11"
    srv.vm.network "forwarded_port", guest: 80, host: 8080
    # Provider Virtualbox
    srv.vm.provider "virtualbox" do |vb|
      vb.name = "balancer"
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.memory = "1024"
      vb.cpus = 1
    end # of vb
    # Shared folders
    if Vagrant::Util::Platform.windows? then
      # Configuration SPECIFIC for Windows 10 hosts
      srv.vm.synced_folder "tools", "/home/vagrant/tools",
        owner: "vagrant", group: "vagrant",
        mount_options: ["dmode=775","fmode=755"]
    else
      srv.vm.synced_folder "tools", "/home/vagrant/tools",
        mount_options: ["dmode=775", "fmode=755"]
    end # of shared folders
    # Provisioning
    srv.vm.provision "shell", path: "hosts_ssh.sh"
    srv.vm.provision :reload
  end # of srv 

  # create some web servers
  (1..4).each do |i|
    # Create VM for Web Servers
    config.vm.define "web#{i}" do |srv|
      srv.vm.box = "ubuntu/focal64"
      srv.vm.hostname = "web#{i}"
      srv.vm.network :private_network, ip: "192.168.56.#{30+i}"
      srv.vm.network "forwarded_port", guest: 80, host: 8080+i
      # Provider Virtualbox
      srv.vm.provider "virtualbox" do |vb|
        vb.name = "web#{i}"
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vb.memory = "512"
        vb.cpus = 1
      end # of vb
      # Shared folders
      if Vagrant::Util::Platform.windows? then
        # Configuration SPECIFIC for Windows 10 hosts
        srv.vm.synced_folder "tools", "/home/vagrant/tools",
          owner: "vagrant", group: "vagrant",
          mount_options: ["dmode=775","fmode=755"]
      else
        srv.vm.synced_folder "tools", "/home/vagrant/tools",
          mount_options: ["dmode=775", "fmode=755"]
      end # of shared folders
      # Provisioning
      srv.vm.provision "shell", path: "hosts_ssh.sh"
      srv.vm.provision :reload
    end # of srv
  end # of loop
end # of config
